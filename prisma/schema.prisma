datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  DEMO
  SYSTEM
}

enum UserStatus {
  ACTIVE
  UNVERIFIED
  PENDING
  SUSPENDED
  BANNED
  LOCKED
  DELETED
}

enum EnquiryStatus {
  UNHANDLED
  HANDLED
  IGNORED
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique(map: "email_UNIQUE")
  name           String
  hashedPassword String
  passwordSalt   String
  roleId         UserRole
  statusId       UserStatus

  lockedExpiredAt DateTime?

  // This record's audit trail
  createdAt DateTime  @default(now())
  createdBy Int       @default(0)
  updatedAt DateTime?
  updatedBy Int?
  deleted   Boolean?  @default(false)

  creator User  @relation("UserCreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("UserUpdatedBy", fields: [updatedBy], references: [id])

  loginLogs UserLoginLog[]

  // Records created by this user
  createdLoginLogs  UserLoginLog[] @relation("LoginLogCreatedBy")
  createdEnquiries  Enquiry[]      @relation("EnquiryCreatedBy")
  createdEducations Education[]    @relation("EducationCreatedBy")
  createdWorks      Work[]         @relation("WorkCreatedBy")
  createdUsers      User[]         @relation("UserCreatedBy")

  // Records updated by this user
  updatedLoginLogs  UserLoginLog[] @relation("LoginLogUpdatedBy")
  updatedEnquiries  Enquiry[]      @relation("EnquiryUpdatedBy")
  updatedEducations Education[]    @relation("EducationUpdatedBy")
  updatedWorks      Work[]         @relation("WorkUpdatedBy")
  updatedUsers      User[]         @relation("UserUpdatedBy")
}

model UserLoginLog {
  id           Int       @id @default(autoincrement())
  userId       Int
  ipAddress    String?
  userAgent    String?
  failAttempts Int       @default(0)
  sessionToken String?   @unique(map: "sessionToken_UNIQUE") @db.VarChar(500)
  loginAt      DateTime  @default(now())
  logoutAt     DateTime?

  createdAt DateTime  @default(now())
  createdBy Int       @default(0)
  updatedAt DateTime?
  updatedBy Int?
  deleted   Boolean?  @default(false)

  user    User  @relation(fields: [userId], references: [id])
  creator User  @relation("LoginLogCreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("LoginLogUpdatedBy", fields: [updatedBy], references: [id])
}

model Enquiry {
  id          Int           @id @default(autoincrement())
  name        String
  email       String
  companyName String?
  phoneNo     String?
  comment     String        @db.VarChar(2000)
  statusId    EnquiryStatus

  createdAt DateTime  @default(now())
  createdBy Int       @default(0)
  updatedAt DateTime?
  updatedBy Int?
  deleted   Boolean?  @default(false)

  creator User  @relation("EnquiryCreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("EnquiryUpdatedBy", fields: [updatedBy], references: [id])
}

model Education {
  id          Int     @id @default(autoincrement())
  degree      String
  subject     String
  schoolName  String
  description String  @db.VarChar(2000)
  startMonth  Int
  startYear   Int
  endMonth    Int?
  endYear     Int?
  isCurrent   Boolean

  createdAt DateTime  @default(now())
  createdBy Int       @default(0)
  updatedAt DateTime? @default(now())
  updatedBy Int?      @default(0)
  deleted   Boolean?  @default(false)

  creator User  @relation("EducationCreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("EducationUpdatedBy", fields: [updatedBy], references: [id])
}

model Work {
  id          Int     @id @default(autoincrement())
  title       String
  companyName String
  description String  @db.VarChar(2000)
  startMonth  Int
  startYear   Int
  endMonth    Int?
  endYear     Int?
  isCurrent   Boolean

  createdAt DateTime  @default(now())
  createdBy Int       @default(0)
  updatedAt DateTime?
  updatedBy Int?
  deleted   Boolean?  @default(false)

  creator User  @relation("WorkCreatedBy", fields: [createdBy], references: [id])
  updater User? @relation("WorkUpdatedBy", fields: [updatedBy], references: [id])
}
